-- Fase 1: Fondasi & Infrastruktur (Backend)
-- Tugas 1: Perbarui Skema Database

-- Tambahkan 'parent' ke tipe enum user_role
ALTER TYPE public.user_role ADD VALUE IF NOT EXISTS 'parent';

-- Buat tabel baru parent_child_link
CREATE TABLE IF NOT EXISTS public.parent_child_link (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    parent_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    child_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    CONSTRAINT unique_parent_child_link UNIQUE (parent_id, child_id)
);

-- Tambahkan komentar untuk tabel dan kolom
COMMENT ON TABLE public.parent_child_link IS 'Menghubungkan akun orang tua dengan akun anak.';
COMMENT ON COLUMN public.parent_child_link.parent_id IS 'ID profil orang tua.';
COMMENT ON COLUMN public.parent_child_link.child_id IS 'ID profil anak.';

-- Aktifkan Row Level Security (RLS)
ALTER TABLE public.parent_child_link ENABLE ROW LEVEL SECURITY;

-- Kebijakan RLS
-- Orang tua dapat melihat link mereka sendiri.
DROP POLICY IF EXISTS "Parents can view their own links." ON public.parent_child_link;
CREATE POLICY "Parents can view their own links."
ON public.parent_child_link FOR SELECT
TO authenticated
USING (parent_id = auth.uid());

-- Anak dapat melihat link mereka sendiri.
DROP POLICY IF EXISTS "Children can view their own links." ON public.parent_child_link;
CREATE POLICY "Children can view their own links."
ON public.parent_child_link FOR SELECT
TO authenticated
USING (child_id = auth.uid());

-- Orang tua dapat membuat link.
DROP POLICY IF EXISTS "Parents can create links." ON public.parent_child_link;
CREATE POLICY "Parents can create links."
ON public.parent_child_link FOR INSERT
TO authenticated
WITH CHECK (parent_id = auth.uid());

-- Orang tua dapat menghapus link mereka.
DROP POLICY IF EXISTS "Parents can delete their own links." ON public.parent_child_link;
CREATE POLICY "Parents can delete their own links."
ON public.parent_child_link FOR DELETE
TO authenticated
USING (parent_id = auth.uid());


-- Tugas 2: Buat "Kode Anak"
-- Tambahkan kolom child_code ke tabel users
ALTER TABLE public.users
ADD COLUMN IF NOT EXISTS child_code TEXT;

-- Buat indeks untuk performa query
CREATE INDEX IF NOT EXISTS idx_child_code ON public.users(child_code);

-- Tambahkan komentar untuk kolom baru
COMMENT ON COLUMN public.users.child_code IS 'Kode unik untuk siswa yang digunakan orang tua untuk menautkan akun.';

-- Kebijakan RLS untuk kolom child_code
-- Karena kebijakan pada tabel `users` mungkin kompleks dan dikelola oleh Supabase Auth,
-- kita akan mengandalkan fungsi RPC untuk mengakses data anak yang tertaut dengan aman
-- daripada memodifikasi kebijakan RLS yang ada secara langsung pada tabel `users`.
-- Ini adalah pendekatan yang lebih aman untuk menghindari konflik dengan kebijakan bawaan Supabase.
-- Kebijakan yang ada pada `parent_child_link` sudah cukup untuk mengamankan hubungan.
-- Kebijakan SELECT pada `users` biasanya sudah diatur agar pengguna bisa melihat profil mereka sendiri.
-- Kita akan menangani akses data anak di sisi aplikasi melalui backend/RPC calls.
-- Menghapus modifikasi kebijakan yang salah:
-- DROP POLICY IF EXISTS "Users can view their own profile." ON public.users;
-- CREATE POLICY "Users can view their own profile and linked profiles." ...
-- Kode di atas sengaja dikomentari untuk menghindari perubahan tak terduga pada kebijakan auth.

-- Fungsi untuk menghasilkan kode unik
CREATE OR REPLACE FUNCTION generate_random_string(length integer)
RETURNS text AS $$
DECLARE
  chars text[] := '{A,B,C,D,E,F,G,H,I,J,K,L,M,N,P,Q,R,S,T,U,V,W,X,Y,Z,2,3,4,5,6,7,8,9}';
  result text := '';
  i integer := 0;
BEGIN
  FOR i IN 1..length LOOP
    result := result || chars[1+random()*(array_length(chars, 1)-1)];
  END LOOP;
  RETURN result;
END;
$$ LANGUAGE plpgsql;

-- Fungsi untuk menghasilkan child_code yang unik
CREATE OR REPLACE FUNCTION generate_unique_child_code()
RETURNS text AS $$
DECLARE
  new_code text;
  is_duplicate boolean;
BEGIN
  LOOP
    new_code := generate_random_string(6);
    SELECT EXISTS (SELECT 1 FROM public.users WHERE child_code = new_code) INTO is_duplicate;
    IF NOT is_duplicate THEN
      RETURN new_code;
    END IF;
  END LOOP;
END;
$$ LANGUAGE plpgsql;

-- Trigger untuk mengisi child_code saat profil siswa dibuat
CREATE OR REPLACE FUNCTION set_child_code_on_student_creation()
RETURNS TRIGGER AS $$
BEGIN
  IF NEW.role = 'student' AND NEW.child_code IS NULL THEN
    NEW.child_code := generate_unique_child_code();
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS on_student_user_created ON public.users;
CREATE TRIGGER on_student_user_created
  BEFORE INSERT ON public.users
  FOR EACH ROW
  EXECUTE FUNCTION set_child_code_on_student_creation();
